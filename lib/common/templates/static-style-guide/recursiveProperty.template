<%
  var colorRegex = /^(#(?:[\da-f]{3}){1,2}|rgb\((?:\d{1,3},\s*){2}\d{1,3}\)|rgba\((?:\d{1,3},\s*){3}\d*\.?\d+\)|hsl\(\d{1,3}(?:,\s*\d{1,3}%){2}\)|hsla\(\d{1,3}(?:,\s*\d{1,3}%){2},\s*\d*\.?\d+\)|IndianRed|LightCoral|Salmon|DarkSalmon|LightSalmon|Crimson|Red|FireBrick|DarkRed|Pink|LightPink|HotPink|DeepPink|MediumVioletRed|PaleVioletRed|LightSalmon|Coral|Tomato|OrangeRed|DarkOrange|Orange|Gold|Yellow|LightYellow|LemonChiffon|LightGoldenrodYellow|PapayaWhip|Moccasin|PeachPuff|PaleGoldenrod|Khaki|DarkKhaki|Lavender|Thistle|Plum|Violet|Orchid|Fuchsia|Magenta|MediumOrchid|MediumPurple|RebeccaPurple|BlueViolet|DarkViolet|DarkOrchid|DarkMagenta|Purple|Indigo|SlateBlue|DarkSlateBlue|MediumSlateBlue|GreenYellow|Chartreuse|LawnGreen|Lime|LimeGreen|PaleGreen|LightGreen|MediumSpringGreen|SpringGreen|MediumSeaGreen|SeaGreen|ForestGreen|Green|DarkGreen|YellowGreen|OliveDrab|Olive|DarkOliveGreen|MediumAquamarine|DarkSeaGreen|LightSeaGreen|DarkCyan|Teal|Aqua|Cyan|LightCyan|PaleTurquoise|Aquamarine|Turquoise|MediumTurquoise|DarkTurquoise|CadetBlue|SteelBlue|LightSteelBlue|PowderBlue|LightBlue|SkyBlue|LightSkyBlue|DeepSkyBlue|DodgerBlue|CornflowerBlue|MediumSlateBlue|RoyalBlue|Blue|MediumBlue|DarkBlue|Navy|MidnightBlue|Cornsilk|BlanchedAlmond|Bisque|NavajoWhite|Wheat|BurlyWood|Tan|RosyBrown|SandyBrown|Goldenrod|DarkGoldenrod|Peru|Chocolate|SaddleBrown|Sienna|Brown|Maroon|White|Snow|HoneyDew|MintCream|Azure|AliceBlue|GhostWhite|WhiteSmoke|SeaShell|Beige|OldLace|FloralWhite|Ivory|AntiqueWhite|Linen|LavenderBlush|MistyRose|Gainsboro|LightGray|Silver|DarkGray|Gray|DimGray|LightSlateGray|SlateGray|DarkSlateGray|Black)$/i;

  var checkForStyle = function(modelChildValue, modelChildKey) {
    var toStyle = "";
    if(modelChildValue.value.match(colorRegex)) {
      if(modelChildValue.path.indexOf('font')>-1) {
        toStyle += "color:" + modelChildValue.value + ";";
        if(modelChildValue.path.indexOf('inverse')>-1 || (modelChildValue.attributes && modelChildValue.attributes.background=="inverse")) {
          toStyle += "background-color:#000;";
        }
      }
      else {
        toStyle += "background-color:" + modelChildValue.value + ";";
        if(modelChildValue.path.indexOf('inverse')>-1 || (modelChildValue.attributes && modelChildValue.attributes.font=="inverse")) {
          toStyle += "color:#fff;";
        }
      }
    }
    return toStyle;
  };
%>
<% _.forOwn(model, function(modelChildValue, modelChildKey) { %>
  <% if(modelChildValue._isProperty === true) { %>
    <div class="style-guide-property" data-path="<%= modelChildValue.path.join("-") %>" style="<%= checkForStyle(modelChildValue, modelChildKey) %>">
      <div class="style-guide-property-path"><%= modelChildValue.path.join(".") %></div>
      <div class="style-guide-property-name"><%= modelChildValue.name %></div>
      <% if(modelChildValue.attributes && JSON.stringify(modelChildValue.attributes)!=="{}") { %>
        <div class="style-guide-property-attributes-control"></div>
      <% } %>
      <div class="style-guide-property-value"><%= modelChildValue.value %></div>
      <% if(modelChildValue.attributes && JSON.stringify(modelChildValue.attributes)!=="{}") { %>
        <div class="style-guide-property-attributes"><%= JSON.stringify(modelChildValue.attributes) %></div>
      <% } %>
    </div>
  <% } else { %>
    <div class="style-guide-property-hierarchy">
      <div class="style-guide-property-hierarchy-name"><%= modelChildKey %></div>
      <div class="style-guide-properties">
        <%= recursivePropertyTemplate(modelChildValue) %>
      </div>
    </div>
  <% } %>
<% }); %>
